[tool.poetry]
name = "sns-sqs-communicator"
version = "0.1.0"
description = "Package for setting up communication between services via sns and sqs"
authors = [
  "Saritasa <pypi@saritasa.com>",
]
maintainers = [
    "Stanislav Khlud <stanislav.khlud@saritasa.com>",
]
homepage = "https://pypi.org/project/sns-sqs-communicator/"
repository = "https://github.com/saritasa-nest/saritasa-sns-sqs-communicator/"
keywords = [
  "python",
  "aws",
  "sns",
  "sqs",
]
license = "MIT"
readme = "README.md"
packages = [
  { include = "sns_sqs_communicator" }
]

[tool.poetry.plugins.pytest11]
sns_sqs_communicator = "sns_sqs_communicator.testing.plugin"

[tool.poetry.scripts]
sns-sqs-communicator = "sns_sqs_communicator.cli:app"

[tool.poetry.dependencies]
python = "^3.11"
# The AWS SDK for Python
# https://boto3.amazonaws.com/v1/documentation/api/latest/index.html
boto3 = "*"
# Mypy stubs for boto3
# https://pypi.org/project/boto3-stubs/#how-to-install
boto3-stubs = {extras=["sqs", "sns"], version = "*"}
# Data validation using Python type hints
# https://docs.pydantic.dev/latest/
pydantic = "<3"
# Ultra fast JSON encoder and decoder for Python
# https://github.com/ultrajson/ultrajson
ujson = "<6"
# AnyIO is an asynchronous networking and concurrency library
# that works on top of either asyncio or trio.
# https://anyio.readthedocs.io/en/stable/
anyio = "<5"
# Typer, build great CLIs. Easy to code. Based on Python type hints.
typer = {extras=["all"], version = "<1"}
# Python client for Sentry (https://sentry.io)
# https://pypi.org/project/sentry-sdk/
sentry-sdk = {version = "<3", optional = true}

[tool.poetry.extras]
all = ["sentry-sdk"]
sentry = ["sentry-sdk"]

[tool.poetry.group.dev.dependencies]
# Improved REPL
ipdb = "^0.13.13"
ipython = "^8.29.0"
# A framework for managing and maintaining multi-language pre-commit hooks.
# https://pre-commit.com/
pre-commit = "^3.8.0"
# Collection of invoke commands used by Saritasa
# Invoke is a Python (2.7 and 3.4+) task execution tool & library,
# drawing inspiration from various sources to arrive at a powerful & clean feature set.
# http://www.pyinvoke.org/
# https://github.com/saritasa-nest/saritasa-python-invocations/
saritasa_invocations = "^1.2.3"

[tool.poetry.group.linters.dependencies]
# Mypy is a static type checker for Python.
# https://mypy.readthedocs.io/en/stable/
mypy = "^1.13.0"
# UJSON types
types-ujson = "^5.10.0.20240515"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
# To prettify pytest output
pytest-sugar = "^1.0.0"
# Coverage.py is a tool for measuring code coverage of Python programs.
# It monitors your program, noting which parts of the code have been executed,
# then analyzes the source to identify code that could have been executed but was not.
# https://coverage.readthedocs.io/en/latest/
coverage = "^7.6.7"
# Allows you to use fixtures in @pytest.mark.parametrize.
# https://pypi.org/project/pytest-lazy-fixtures/
pytest-lazy-fixtures = "^1.1.1"
# Fast creating of model instances. May be used in tests
# https://factoryboy.readthedocs.io/en/stable/
factory-boy = "^3.3.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
extend-select = [
  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "W",
  "E",
  # https://docs.astral.sh/ruff/rules/#mccabe-c90
  "C90",
  # https://docs.astral.sh/ruff/rules/#isort-i
  "I",
  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "N",
  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "D",
  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "UP",
  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN",
  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "S",
  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "B",
  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "A",
  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "COM",
  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  "C4",
  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "DTZ",
  # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "T10",
  # https://docs.astral.sh/ruff/rules/#flake8-django-dj
  "DJ",
  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "T20",
  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "PT",
  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "SIM",
  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "PTH",
  # https://docs.astral.sh/ruff/rules/#flake8-todos-td
  "TD",
  # https://docs.astral.sh/ruff/rules/#eradicate-era
  "ERA",
  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "RUF"
]
ignore = [
    # https://docs.astral.sh/ruff/rules/ANN101
  "ANN101",
  # https://docs.astral.sh/ruff/rules/ANN102
  "ANN102",
  # https://docs.astral.sh/ruff/rules/ANN401
  "ANN401",
  # https://docs.astral.sh/ruff/rules/ANN003
  "ANN003",
  # https://docs.astral.sh/ruff/rules/D100
  "D100",
  # https://docs.astral.sh/ruff/rules/D104
  "D104",
  # https://docs.astral.sh/ruff/rules/D106
  "D106",
  # https://docs.astral.sh/ruff/rules/D107
  "D107",
  # https://docs.astral.sh/ruff/rules/ERA001
  "ERA001",
  # https://docs.astral.sh/ruff/rules/RUF018
  "RUF018"
]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  # https://docs.astral.sh/ruff/rules/F401
  "F401",
]
"**/tests/*" = [
  # https://docs.astral.sh/ruff/rules/S101
  "S101",
  # https://docs.astral.sh/ruff/rules/S106
  "S106",
  # https://docs.astral.sh/ruff/rules/S311
  "S311",
]
"**/test_*" = [
  # https://docs.astral.sh/ruff/rules/ANN201
  "ANN201",
]
"**/testing.py*" = [
  # https://docs.astral.sh/ruff/rules/S101
  "S101",
]
"**/testing/**" = [
  # https://docs.astral.sh/ruff/rules/S101
  "S101",
]
[tool.ruff.lint.isort]
force-wrap-aliases = true
split-on-trailing-comma = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "boto3",
    "first-party",
    "local-folder",
]
[tool.ruff.lint.isort.sections]
boto3 = [
  "boto3",
  "botocore",
  "mypy_boto3_sns",
  "mypy_boto3_sqs",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "list"
parametrize-values-type = "list"
parametrize-values-row-type = "list"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
plugins = []
# https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
ignore_missing_imports = true
strict = false
warn_no_return = false
check_untyped_defs = true
disallow_any_generics = true
exclude = [
  "venv",
  ".venv",
]
disable_error_code = [
  # Mypy demands that all typing as variable would have type of TypeAlias,
  # but it's not allowed to be done as function argument, which we are using a
  # lot in API
  "valid-type",
]

[[tool.mypy.overrides]]
module = "tests/*"
disable_error_code = [
  "attr-defined",
  "operator",
]

[tool.pyright]
ignore = [
  # Disabled for tests because of dynamic nature of pytest
  "**/test_*.py",
  "invocations/**"
]

[tool.pytest.ini_options]
# --capture=no
#   allow use of ipdb during tests
# --ff
#   run last failed tests first
addopts = [
    "--capture=no",
    "--ff",
]
# skip all files inside following dirs
norecursedirs = [
    "venv",
    ".venv",
    "queues",
]
# Configuration for sqs/sns
sns_sqs_endpoint_url = "https://localhost.localstack.cloud:4566"
sns_sqs_region="us-west-1"
sns_sqs_access_key="root"
sns_sqs_secret_key="rootroot"
sns_sqs_queue_name="sns-sqs-communicator-queue.fifo"
sns_sqs_dead_letter_queue_name="sns-sqs-communicator-dead-letter-queue.fifo"
sns_sqs_topic_name="sns-sqs-communicator-topic.fifo"
sqs_parser_class="tests.queues.SQSParser"
sns_parser_class="tests.queues.SNSParser"
sqs_poll_worker_class="tests.queues.SQSPollWorker"

[tool.coverage.run]
omit = [
  "sns_sqs_communicator/local.py"
]

[tool.coverage.report]
include = ["sns_sqs_communicator/**"]

# https://docformatter.readthedocs.io/en/latest/configuration.html#
[tool.docformatter]
wrap-descriptions=0
in-place=true
blank=true
black=true

[tool.sns-sqs-communicator]
[tool.sns-sqs-communicator.local-setup]
endpoint_url = "https://localhost.localstack.cloud:4566"
region="us-west-1"
access_key="root"
secret_key="rootroot"
queues_to_create=[
  "/000000000000/cli-test.fifo",
  "/000000000000/cli-test-dead-letter.fifo",
  "/000000000000/cli-test-for-topic.fifo",
]
topics_to_create=[
  "arn:aws:sns:${aws_region}:000000000000:cli-test-sns-topic.fifo",
]
[tool.sns-sqs-communicator.local-setup.topics_subscriptions]
"arn:aws:sns:${aws_region}:000000000000:cli-test-sns-topic.fifo"=[
    "/000000000000/cli-test-for-topic.fifo",
]
[tool.sns-sqs-communicator.local-setup.queue_attributes]
FifoQueue="true"
[tool.sns-sqs-communicator.local-setup.queue_policy]
Effect="Allow"
Action="sqs:SendMessage"
[tool.sns-sqs-communicator.local-setup.queue_policy.Principal]
Service="sns.amazonaws.com"
[tool.sns-sqs-communicator.local-setup.topic_attributes]
FifoTopic="true"
# Enable content-base deduplication which is required for FIFO
# topic
# https://docs.aws.amazon.com/sns/latest/dg/fifo-message-dedup.html
ContentBasedDeduplication="true"
